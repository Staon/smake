# Copyright (C) 2013 Aveco s.r.o.
#
# This file is part of SMake.
#
# SMake is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# SMake is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with SMake.  If not, see <http://www.gnu.org/licenses/>.

#  Generic binary main resource
package SMakeParser::BinaryResource;

use SMakeParser::MainResource;

@ISA = qw(SMakeParser::MainResource);

use SBuild::TargetResource;
use SBuild::SourceResource;
use SBuild::ToolChain;
use SMakeParser::ProfileUtils;

#  Ctor
#
#  Usage: newResource($binname)
sub newResource {
	my ($class, $binname) = @_;
	my $this = SMakeParser::MainResource->newResource($binname);
	bless $this, $class;
}

#  Check if this resource generates a binary file
sub isBinaryResource {
	return 1;
}

#  Get name of the binary task
sub getBinTaskName {
	my $this = $_[0];
	return $this->getFilename;
}

sub getExeResource {
	my $this = $_[0];
	my $profile = $_[1];
	return $this->createFileResource($this->getPurename . $profile->getToolChain->getExecExtension);
}

#  Get list of real file resources which are generated by this
#  resource.
#
#  This method is used to implement the "TaskAfter" behaviour. The tail
#  .task gets list of real resources and modifies them.
#
#  Usage: getTargetResources($profile): \@list
sub getTargetResources {
	my $this = $_[0];
	my $profile = $_[1];
	return [$this->getExeResource($profile)];
}

#  Extend resource map
#
#  Usage: extendMap($map, $assembler, $profile, $reporter)
sub extendMap {
	my $this = $_[0];
	my $map = $_[1];
	my $assembler = $_[2];
	my $profile = $_[3];
	my $reporter = $_[4];

	return $this->extendMapBinary($map, $assembler, $profile, $reporter);
}

#  Process the main resource
#
#  Usage: processResource($map, $assembler, $profile, $reporter)
sub processResource {
	my $this = $_[0];
	my $map = $_[1];
	my $assembler = $_[2];
	my $profile = $_[3];
	my $reporter = $_[4];

	my $task = $this->processResourceBinary($map, $assembler, $profile, $reporter);

	# -- the library is linked as a default library, so I must add this
	#    dependency to all created binaries
	SMakeParser::ProfileUtils::addLibraryDependency($assembler, "memtestsupport.lib");
	
	return $task;	
}

sub extendMapBinary {
	die "Pure virtual method: BinaryResource::extendMapBinary";
} 

sub processResourceBinary {
	die "Pure virtual method: BinaryResource::processResourceBinary";
}

return 1;
