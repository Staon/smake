##############################################################################
#  Main configuration file of the smake system
#
#  This file is a usual perl script. You can do here everything what
#  can be written in the perl language.
#
#  As an smake extension the variable $worker is present for whole time
#  of interpreting of this file. It's a referenc to a special object which
#  offers two functions designated for configuration files:
#
#  1) appendProfile($profile)
#
#    This function adds a new compilation profile. As the only one argument
#    expects an instance of the profile. 
#      You can use direct SBuild::VarCompileProfile, which allows to specify
#    directly a profile variable, i.e. LDFLAGS, CPPFLAGS, CFLAGS, CXXCPPFLAGS
#    or CXXFLAGS.
#      Or you can use any other predefined compilation profiles. When you
#    want to specify a library which is used every time, use the profile
#    SMakeParser::LibProfile. Paths searched for headers can be added by
#    the profile SBuild::IncludeProfile.
#
#  2) registerNamedProfile($name, $profile_module, args...)
#
#    This function adds a new definition of a named compile profile. Its
#    usual using is to define a set of libraries (i.e. xml profile for
#    libraries which are needed to use the XML parsers).
#      The first argument contains a name of the new profile. Be careful
#    not to use a name of another already existing profile.
#      The second argument refers to a perl module, which the profile is
#    implemented in. I.e. SBuild::IncludeProfile.
#      Next arguments are values which are passed to the constructor of the
#    profile and they varies by type of the profile.  

use SBuild::VarCompileProfile;
use SMakeParser::DebugProfile;
use SMakeParser::DfltlibsProfile;
use SMakeParser::LibProfile;
use SBuild::IncludeProfile;
use SMakeParser::OLog2Profile;
use SMakeParser::ProfileStopProfile;
use SMakeParser::StackCheckProfile;

# -- configure used tool chain
$worker->setToolChain("SBuild::GCCToolChain");

# -- linking of standard system libraries
#$worker->appendProfile(SBuild::VarCompileProfile->newCompileProfile(
#	"stdlibs", "LDFLAGS", "-lunix3r -lclib3r -lplib3r -lmath387r -lemu387"));

# -- remove checking of stack overflow
#$worker->appendProfile(SMakeParser::StackCheckProfile->newCompileProfile);

# -- by default turn on the debugging information
$worker->appendProfile(SMakeParser::DebugProfile->newCompileProfile(2));

# -- by default turn off using of default libraries (#pragma library) 
#$worker->appendProfile(SMakeParser::DfltlibsProfile->newCompileProfile);

# -- don't create .bak files when a library is creating
#$worker->appendProfile(SBuild::VarCompileProfile->newCompileProfile(
#	"", "LIBFLAGS", "-b"));

# -- during the clean stage clean .err files too
#$worker->appendProfile(SBuild::VarCompileProfile->newCompileProfile(
#               "", "CLEAN_FILES", "*.err"));

# -- set implicit paths to search header files. These paths are additional
#    to searching paths defined by the repositories.
#    The paths refer standard system headers and our implementation of
#    the STL library.
$worker->appendProfile(SBuild::IncludeProfile->newCompileProfile(
	["/usr/include"])); 

# -- os: to resolve a big problem with the OCallback2 system from the past,
#    I have to add here a newly created library. Functions from the library
#    was completely inlined and now it's not possible to add this library
#    into all SMakefiles.
#$worker->appendProfile(SMakeParser::LibProfile->newCompileProfile(
#	["ondrart_callback2.lib"], []));

################################################################
#  Library profiles
#
#  This section defines usual sets of libraries as a named profile.

# -- NoDebug profile - it removes all flags which define level
#    of debugging information
$worker->registerNamedProfile(
        "nodebug", SMakeParser::ProfileStopProfile,
	["CFLAGS", "CXXFLAGS", "LDFLAGS"], "debug");

# -- Temporary profile before removing of the #pragma library
#$worker->registerNamedProfile(
#        "nostdlibs", SMakeParser::ProfileStopProfile,
#	["LDFLAGS"], "stdlibs");

# -- Terminal profile - OTerm class and the terminfo system libraries
#$worker->registerNamedProfile(
#	"terminal", SMakeParser::LibProfile,
#	["ondrart_term.lib"], ["ncurses3r.lib"]);

# -- OGetopt2 profile
#$worker->registerNamedProfile(
#	"ogetopt", SMakeParser::LibProfile,
#	["ondrart_typo.lib", "ondrart_getopt.lib", "ondrart_ios.lib",
#	 "ondrart_term.lib", "ondrart_bool.lib"],
#	["ncurses3r.lib"]);

# -- phrt library (the progessbar)
#$worker->registerNamedProfile(
#	"photonrt", SMakeParser::LibProfile,
#	[], ["phrtlib"]);

# -- basic kernel libraries
#$worker->registerNamedProfile(
#       "kernel", SMakeParser::LibProfile,
#        ["configclient.lib", "datstr.lib", "kernel.lib", "licastra.lib",
#         "ondrart_bool.lib", "ondrart_getopt.lib", "ondrart_global.lib",
#         "ondrart_help.lib", "ondrart_ios.lib", "ondrart_kernel.lib",
#         "ondrart_typo.lib", "textclient.lib", "utils.lib"], []);

# -- libraries of status clients
#$worker->registerNamedProfile(
#        "statusclient", SMakeParser::LibProfile,
#        ["statusclient.lib"], []);

# -- OLog2 profiles
#$worker->registerNamedProfile(
#	"olog2disable", SMakeParser::OLog2Profile, "disable");
#$worker->registerNamedProfile(
#	"olog2logger", SMakeParser::OLog2Profile, "logger");
#$worker->registerNamedProfile(
#	"olog2type", SMakeParser::OLog2Profile, "type");
#$worker->registerNamedProfile(
#	"olog2level", SMakeParser::OLog2Profile, "level");
#$worker->registerNamedProfile(
#	"olog2secret", SMakeParser::OLog2Profile, "secret");

# -- Additional cleaning masks
$worker->registerNamedProfile(
	"forceclean", SBuild::VarCompileProfile,
	"", "CLEAN_FILES", "*.map *.link");

return 1;

