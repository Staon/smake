# Copyright (C) 2013 Aveco s.r.o.
#
# This file is part of SMake.
#
# SMake is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# SMake is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with SMake.  If not, see <http://www.gnu.org/licenses/>.

#  Compilation resource
package SBuild::Resource;

use SBuild::ProfileList;

#  Ctor
#
#  Usage: newResource($id)
sub newResource {
	my $class = $_[0];
	my $this = {
		id => $_[1],
		profiles => SBuild::ProfileList->newProfileList,
		arguments => {}
	};
	bless $this, $class;
}

#  Get resource identifier
sub getID {
	my $this = $_[0];
	return $this->{id};
}

#  Get resource id as regular expressiong (it escapes special characters)
sub getRegExID {
	my $this = $_[0];
	return quotemeta($this->{id});
}

#  Append a compilation profile
#
#  Usage: appendProfile($profile)
sub appendProfile {
	my $this = $_[0];
	$this->{profiles}->appendProfile($_[1]);
}

#  Get profile list
sub getProfileList {
	my $this = $_[0];
	return $this->{profiles};
}

#  Set profile list
sub setProfileList {
	my $this = $_[0];
	my $list = $_[1];
	$this->{profiles} = $list;
}

#  Set resource arguments
#
#  Usage: setArguments(\%arguments)
sub setArguments {
	my $this = $_[0];
	$this->{arguments} = $_[1];
}

#  Get resource arguments
sub getArguments {
	my $this = $_[0];
	return $this->{arguments};
}

#  Set a task mark
#
#  Usage: setTaskMark($mark)
#  Return: Actual task mark
sub setTaskMark {
	my $this = $_[0];
	if(! defined($this->{taskmark})) {
		$this->{taskmark} = $_[1];
	}
	return $this->{taskmark};
}

#  Get the task mark or get undef when no mark is set.
sub getTaskMark {
	my $this = $_[0];
	return $this->{taskmark};
}

#  Get list of real file resources which are generated by this
#  resource.
#
#  This method is used to implement the "TaskAfter" behaviour. The tail
#  .task gets list of real resources and modifies them.
#
#  Usage: getTargetResources($profile): \@list
sub getTargetResources {
	die "Pure virtual method: Resource::getTargetResources";
}

return 1;
